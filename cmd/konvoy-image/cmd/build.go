package cmd

import (
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"

	"github.com/mesosphere/konvoy-image-builder/pkg/app"
	"github.com/mesosphere/konvoy-image-builder/pkg/packer"
)

const workDirFlagName = "work-dir"

type buildCLIFlags struct {
	packerPath         string
	packerManifestPath string
	packerBuildOnError string
	workDir            string
	dryRun             bool

	generateCLIFlags
}

var buildFlags buildCLIFlags

var buildCmd = &cobra.Command{
	Use:     "build <image.yaml>",
	Short:   "build and provision images",
	Example: "build --region us-west-2 --source-ami=ami-12345abcdef images/ami/centos-7.yaml",
	Args:    cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		builder := newBuilder()

		var workDir string
		var err error
		if buildFlags.workDir == "" {
			workDir, err = builder.InitConfig(newInitOptions(args[0], buildFlags.generateCLIFlags))
			if err != nil {
				bail("error rendering builder configuration", err, 2)
			}
		} else {
			workDir = buildFlags.workDir
			log.Printf("using workDir provided by --%s flag: %s", workDirFlagName, workDir)
		}

		if err := builder.Run(workDir, NewBuildOptions()); err != nil {
			bail("error during run", err, 3)
		}
	},
}

func newBuilder() app.Builder {
	return app.Builder{}
}

func NewBuildOptions() app.BuildOptions {
	return app.BuildOptions{
		PackerPath: buildFlags.packerPath,
		PackerBuildFlags: packer.BuildFlags{
			Debug:   rootFlags.LogDebug(),
			Color:   rootFlags.Color,
			OnError: buildFlags.packerBuildOnError,
		},
		CustomManifestPath: buildFlags.packerManifestPath,
		DryRun:             buildFlags.dryRun,
	}
}

func init() {
	fs := buildCmd.Flags()
	initGenerateFlags(fs, &buildFlags.generateCLIFlags)
	fs.StringVar(&buildFlags.packerPath, "packer-path", packer.DefaultPath, "the location of the packer binary")
	fs.StringVar(&buildFlags.packerManifestPath, "packer-manifest", "", "provide the path to a custom packer manifest")
	fs.StringVar(&buildFlags.packerBuildOnError,
		"packer-on-error", "", "[advanced] set error strategy for packer. strategies [cleanup, abort, run-cleanup-provisioner]")
	fs.StringVar(&buildFlags.workDir, workDirFlagName, "", "path to custom work directory generated by the generate command")
	fs.BoolVar(&buildFlags.dryRun, "dry-run", false, "do not create artifacts, or delete them after creating. Recommended for tests.")
}
