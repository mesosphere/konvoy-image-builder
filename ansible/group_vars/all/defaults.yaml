---
python_path: ""

# This is also in images/common.yaml as that's where the go code expects it to be.
# If it's not there, the kubernetes_full_version will have "None" for a version number.
#
# IMPORTANT When you update kubernetes_version, also update crictl_version.
kubernetes_version: "1.28.7"
kubernetes_major_minor: "{{ (kubernetes_version.split('.') | map('trim'))[:2] | join('.') }}"
kubernetes_semver: "v{{ kubernetes_version }}"

kubernetes_cni_version: "0.9.1"

# The crictl CLI is released as part of the http://sigs.k8s.io/cri-tools project.
# The project release closely follows the Kubernetes release cycle, and uses a
# nearly identical version scheme.
# IMPORTANT When you update crictl_version, also update crictl_sha256.
crictl_version: "{{ kubernetes_major_minor }}.0"

# On flatcar Linux, we install crictl from a release artifact, not a system package.
# The url points to the linux/amd64 release artifact.
crictl_url: https://github.com/kubernetes-sigs/cri-tools/releases/download/v{{ crictl_version }}/crictl-v{{ crictl_version }}-linux-amd64.tar.gz
# The sha256 sum verifies the integrity of the release artifact.
crictl_sha256: 8dc78774f7cbeaf787994d386eec663f0a3cf24de1ea4893598096cb39ef2508


# The critools deb and rpm package versions. While the version derives directly from
# the crictl verson, the package revision can change independently.
# The initial revision is 00.
critools_deb: "{{ crictl_version }}-1.1"
# The initial revision 0.
critools_rpm: "{{ crictl_version }}-0"

# Containerd container runtime version.
containerd_version: "1.6.28"

# NOTE(jkoelker) `nvidia_cuda_version` is set via an override, it is listed
#                empty here for documentation.
nvidia_cuda_version: ""

# Adding kubernetes_full_version for mitogen runs. This variable is always overridden
# in go code.
kubernetes_full_version: "{{ kubernetes_version }}+{{ kubernetes_build_metadata }}"
kubernetes_image_tag: "{{ kubernetes_full_version  | replace('+', '_') }}"
package_versions:
  enable_repository_installation: "{{ (spec.osPackages.enableAdditionalRepositories if spec.osPackages is defined else true)|default(true)|bool }}"
  # the version may contain d2iq specific suffix, remove it when downloading packages
  kubernetes_rpm: "{{ kubernetes_version }}-0"
  kubernetes_deb: "{{ kubernetes_version }}-1.1"
  kubenode: "{{ kubernetes_version }}"

# variable used for seeding images
k8s_image_registry: "registry.k8s.io"
# the CoreDNS image is not rebuilt for FIPS and should always be pulled from the default registry
k8s_image_registry_for_coredns: "registry.k8s.io"
control_plane_images: []

aws_images: []

extra_images: []

containerd_supplementary_images: ["ghcr.io/mesosphere/toml-merge:v0.2.0", "ghcr.io/mesosphere/dynamic-credential-provider:v0.2.0"]

containerd_base_url: https://packages.d2iq.com/dkp/containerd
docker_base_url: https://download.docker.com/linux/static/stable
kubernetes_http_source: https://dl.k8s.io/release
kubernetes_cni_semver: v{{ kubernetes_cni_version }}
kubernetes_cni_http_checksum: sha256:https://storage.googleapis.com/k8s-artifacts-cni/release/{{ kubernetes_cni_semver }}/cni-plugins-linux-amd64-{{ kubernetes_cni_semver }}.tgz.sha256
kubernetes_cni_http_source: https://github.com/containernetworking/plugins/releases/download
containerd_cri_socket: /run/containerd/containerd.sock
flatcar_containerd_cri_socket: /run/docker/libcontainerd/docker-containerd.sock
systemd_prefix: /usr/lib/systemd/site-packages
flatcar_systemd_prefix: /etc/systemd
sysusr_prefix: /usr
sysusrlocal_prefix: /usr/local
flatcar_sysusr_prefix: /opt
flatcar_sysusrlocal_prefix: /opt

kubernetes_goarch: amd64
kubernetes_bins:
  - kubectl
  - kubelet

sysprep: true

download_images: Null
images_local_bundle_dir: ""
images_cache: /opt/dkp/images
# use the mindthegap in the container by default
mindthegap_binary_location: /usr/local/bin/mindthegap
mindthegap_binary_location_on_remote: /usr/local/bin/mindthegap

os_packages_local_bundle_file: ""
os_packages_remote_bundle_path: "/opt/dkp/packages/"

containerd_local_bundle_file: ""
containerd_remote_bundle_path: "/opt/dkp/containerd/"

pip_packages_local_bundle_file: ""
pip_packages_remote_bundle_path: "/opt/dkp/pip-packages/"
pip_packages_remote_filesystem_repo_path: "/opt/dkp/pip-packages/offline-packages/"

nvidia_runfile_local_file: ""
nvidia_remote_bundle_path: "/opt/dkp/nvidia"

# NOTE(jkoelker) UEK is the default. Set to RHCK to change to RH kernel.
oracle_kernel: UEK
nvidia_driver_version: "470.199.02"
nvidia_runfile_installer: "NVIDIA-Linux-x86_64-{{ nvidia_driver_version }}.run"
nvidia_runfile_installer_url: "https://download.nvidia.com/XFree86/Linux-x86_64/{{ nvidia_driver_version }}/{{ nvidia_runfile_installer }}"
suse_packagehub_product: PackageHub/{{ ansible_distribution_version }}/{{ ansible_architecture }}

pinned_debs: []
