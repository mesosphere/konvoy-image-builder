# TODO: use overrides to set these
kubernetes_semver: "v{{ kubernetes_version }}"

kubernetes_rpm_repository_url: "https://packages.d2iq.com/konvoy/rpm/stable/centos/7/x86_64"
kubernetes_rpm_gpg_key_url: "https://packages.d2iq.com/konvoy/rpm-gpg-pub-key"

kubernetes_rpm_suse_repository_url: "https://packages.d2iq.com/konvoy/rpm/stable/suse/{{ ansible_distribution_major_version|int }}/x86_64"
kubernetes_rpm_suse_gpg_key_url: "https://packages.d2iq.com/konvoy/rpm-gpg-pub-key"

## Debian
kubernetes_deb_repository_url: "https://packages.cloud.google.com/apt/"
kubernetes_deb_gpg_key_url: "https://packages.cloud.google.com/apt/doc/apt-key.gpg"
kubernetes_deb_release_name: "kubernetes-xenial"

# containerd package
# Appstream is enabled by default in rhel8, so install the package from local repositories in that case
docker_rpm_container_selinux_package_url: "{{ 'http://mirror.centos.org/centos/7/extras/x86_64/Packages/container-selinux-2.107-3.el7.noarch.rpm' if ansible_distribution_major_version|int < 8 else 'container-selinux' }}"
docker_rpm_container_selinux_gpg_key_url: "http://mirror.centos.org/centos/RPM-GPG-KEY-CentOS-7"

docker_rpm_repository_url_upstream_mirror: "https://packages.d2iq.com/download.docker.com/linux/centos/7/x86_64/stable"
docker_rpm_repository_url: "https://packages.d2iq.com/konvoy/stable/linux/centos/{{ ansible_distribution_major_version|int }}/x86_64"
docker_rpm_gpg_key_url: "{{ docker_rpm_repository_url }}/gpg.asc"


docker_rpm_suse_repository_url: "https://packages.d2iq.com/konvoy/stable/linux/opensuse/leap/{{ ansible_distribution_major_version|int }}/x86_64"
docker_rpm_suse_gpg_key_url: "{{ docker_rpm_suse_repository_url }}/gpg.asc"

docker_deb_repository_url: "https://konvoy-packages-test.s3.amazonaws.com/stable/linux/{{ ansible_distribution |lower }}/{{ ansible_distribution_release }}"
## focal does not yet have a promote to staging job. Need to create one and wait for the 24 hour sync to production s3
# docker_deb_repository_url: "https://packages.d2iq.com/konvoy/stable/linux/{{ ansible_distribution |lower }}/{{ ansible_distribution_release }}"
docker_deb_gpg_key_url: "https://packages.d2iq.com/konvoy/stable/linux/{{ ansible_distribution |lower }}/{{ ansible_distribution_release }}/gpg.asc"
docker_deb_release_name: "{{ ansible_distribution_release }}"
docker_deb_component: "main"

kubernetes_full_version: "{{ kubernetes_version }}{{ kubernetes_build_meta }}"
package_versions:
  enable_repository_installation: "{{ (spec.osPackages.enableAdditionalRepositories if spec.osPackages is defined else true)|default(true)|bool }}"
  # the version may contain d2iq specific suffix, remove it when downloading packages
  kubernetes_rpm: "{{ kubernetes_version }}-0"
  kubernetes_deb: "{{ kubernetes_version }}-00"
  kubenode: "{{ kubernetes_version }}"
  containerd_deb: "{{ containerd_version }}-1"
  containerd_minor_version: "{{ containerd_version[:3] }}"

default_image_registry: ""

fips:
  enabled: false

proxy_env:
  HTTPS_PROXY: "{{ https_proxy | default('') }}"
  https_proxy: "{{ https_proxy | default('') }}"
  HTTP_PROXY: "{{ http_proxy | default('') }}"
  http_proxy: "{{ http_proxy | default('') }}"
  NO_PROXY: "{{ no_proxy | default('') }}"
  no_proxy: "{{ no_proxy | default('') }}"

python_env:
  PYTHONPATH: "{{ python_path }}"

default_env: "{{ proxy_env | combine(python_env) }}"

##### Validate #########
system_default_path_env: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
system_path_env: "{{ ansible_env.PATH if ansible_env is defined and ansible_env.PATH is defined else '' }}:{{ system_default_path_env }}"
combined_env: "{{ proxy_env | combine({'PATH': system_path_env}) }}"

inventory_hostnames: "{{ groups['all'] | map('extract', hostvars, ['ansible_hostname']) | select('defined') | list }}"

validate:
  # Disk usage must be lesser than 85% on the root volume
  disk_usage_threshold: 85
  # Disk size allocation must be equal or greater than 80GB on the root volume
  # Debian based OS report the size differently, use 78 instead of 80
  disk_size_threshold: 78
  # Minimum control_plane memory allocated to each control plane machine in megabytes. The calculation is 3G (1G is allocated to the kubelet daemons) + TargetRAMMB value, if set.
  minimum_memory_control_plane_mb: 3072
  # Minimum worker memory allocated to each work machine in megabytes. The calculation is 1G + 1G(allocated to kubelet daemons).
  minimum_memory_worker_mb: 2048
  # Minimum CPU cores allocated to each machine.
  minimum_cpu_cores: 2
