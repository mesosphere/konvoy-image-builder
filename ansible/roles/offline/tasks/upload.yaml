---
- name: Gather os-release facts
  ansible.utils.cli_parse:
    command: cat /etc/os-release
    parser:
      name: ansible.netcommon.native
      command: cat os-release
      os: linux
    set_fact: os_release

- name: Set containerd_tar_file
  set_fact:
    # we need os_release.ID because d2iqs containerd tars are released with using /etc/os-release for determining OS
    # distribution_version is used instead of an os_release fact because centos 7 does not include minor version
    # in VERSION_ID and ansible_distribution_version does get the minor version
    containerd_tar_file: "containerd-{{ containerd_version }}-d2iq.1-{{ os_release.ID }}-{{ ansible_distribution_version }}-{{ ansible_architecture }}{{ '_fips' if fips.enabled else '' }}.tar.gz"

- block:
    - name: create images directory
      file:
        path: "{{ images_cache }}"
        state: directory

    - name: list tar.gz files in the local image cache
      find:
        paths:
          - "{{ images_local_bundle_dir }}"
        patterns:
          - .*\.tar(\.gz)?
        file_type: file
        use_regex: true
      register: images_cache_find_result
      delegate_to: 127.0.0.1
      become: no
      changed_when: false

    - name: upload image bundles to remote
      copy:
        src: "{{ item }}"
        dest: "{{ images_cache}}/{{ item | basename }}"
      with_items: "{{  images_cache_find_result.files | map(attribute='path') | list }}"

    - name: upload mindthegap
      copy:
        src: "{{ mindthegap_binary_location }}"
        dest: "{{ mindthegap_binary_location_on_remote }}"
        mode: 0755
  when: images_local_bundle_dir != ""

- block:
    - name: create offline OS packages directory
      file:
        path: "{{ offline.os_packages_remote_filesystem_repo_path }}"
        state: directory

    - name: upload OS packages bundle to remote
      copy:
        src: "{{ offline.os_packages_local_bundle_file }}"
        dest: "{{ offline.os_packages_remote_bundle_path }}/offline-repo.tar.gz"
      register: os_packages_copied

    - name: remove outdated os packages
      file:
        path: "{{ offline.os_packages_remote_filesystem_repo_path }}"
        state: absent
      when: os_packages_copied.changed

    # recreate the directory as it may be deleted in the previous step
    - name: create offline OS packages directory after cleanup
      file:
        path: "{{ offline.os_packages_remote_filesystem_repo_path }}"
        state: directory
      when: os_packages_copied.changed

    - name: unarchive OS packages bundle on remote
      unarchive:
        src: "{{ offline.os_packages_remote_bundle_path }}/offline-repo.tar.gz"
        dest: "{{ offline.os_packages_remote_filesystem_repo_path }}"
        remote_src: yes
        mode: 0755
  when: offline.os_packages_local_bundle_file != ""

- block:
    - name: create offline pip packages directory
      file:
        path: "{{ pip_packages_remote_filesystem_repo_path }}"
        state: directory

    - name: upload pip packages bundle to remote
      copy:
        src: "{{ pip_packages_local_bundle_file }}"
        dest: "{{ pip_packages_remote_bundle_path }}/pip-repo.tar.gz"
      register: pip_packages_copied

    - name: remove outdated pip packages
      file:
        path: "{{ pip_packages_remote_filesystem_repo_path }}"
        state: absent
      when: pip_packages_copied.changed

    # recreate the directory as it may be deleted in the previous step
    - name: create offline pip packages directory after cleanup
      file:
        path: "{{ pip_packages_remote_filesystem_repo_path }}"
        state: directory
      when: pip_packages_copied.changed

    - name: unarchive pip packages bundle on remote
      unarchive:
        src: "{{ pip_packages_remote_bundle_path }}/pip-repo.tar.gz"
        dest: "{{ pip_packages_remote_filesystem_repo_path }}"
        remote_src: yes
  when: pip_packages_local_bundle_file != ""

- block:
    - name: create offline containerd bundle directory
      file:
        path: "{{ containerd_remote_bundle_path }}"
        state: directory

    - name: upload containerd bundle to remote
      copy:
        src: "{{ containerd_local_bundle_file }}"
        dest: "{{ containerd_remote_bundle_path }}/{{ containerd_tar_file }}"
  when: containerd_local_bundle_file != ""
