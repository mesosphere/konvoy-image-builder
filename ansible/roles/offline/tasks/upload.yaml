---
- name: Gather os-release facts
  ansible.utils.cli_parse:
    command: cat /etc/os-release
    parser:
      name: ansible.netcommon.native
      command: cat os-release
      os: linux
    set_fact: os_release

- name: Set containerd_tar_file
  set_fact:
    # Notes
    # 1. Containerd artifact filenames use the ID value in /etc/os-release. Because this value is not available in
    # the builtin ansible_facts, we use a module to populate this value into os_release.ID.
    # 2. Containerd artifact filenames use the major and minor OS version. On CentOS 7, the minor version is not
    # available in the VERSION_ID value in /etc/os-release. Instead, we use ansible_distribution_version, which contains
    # the major and minor version for every OS.
    containerd_tar_file: "containerd-{{ containerd_version }}-d2iq.1-{{ os_release.ID }}-{{ ansible_distribution_version }}-{{ ansible_architecture }}{{ '_fips' if fips.enabled else '' }}.tar.gz"

- block:
    - name: create offline OS packages directory
      file:
        path: "{{ offline.os_packages_remote_filesystem_repo_path }}"
        state: directory

    - name: upload OS packages bundle to remote
      copy:
        src: "{{ offline.os_packages_local_bundle_file }}"
        dest: "{{ offline.os_packages_remote_bundle_path }}/offline-repo.tar.gz"
      register: os_packages_copied

    - name: remove outdated os packages
      file:
        path: "{{ offline.os_packages_remote_filesystem_repo_path }}"
        state: absent
      when: os_packages_copied.changed

    # recreate the directory as it may be deleted in the previous step
    - name: create offline OS packages directory after cleanup
      file:
        path: "{{ offline.os_packages_remote_filesystem_repo_path }}"
        state: directory
      when: os_packages_copied.changed

    - name: unarchive OS packages bundle on remote
      unarchive:
        src: "{{ offline.os_packages_remote_bundle_path }}/offline-repo.tar.gz"
        dest: "{{ offline.os_packages_remote_filesystem_repo_path }}"
        remote_src: yes
        mode: 0755
  when: offline.os_packages_local_bundle_file != ""

- block:
    - name: create offline pip packages directory
      file:
        path: "{{ pip_packages_remote_filesystem_repo_path }}"
        state: directory

    - name: upload pip packages bundle to remote
      copy:
        src: "{{ pip_packages_local_bundle_file }}"
        dest: "{{ pip_packages_remote_bundle_path }}/pip-repo.tar.gz"
      register: pip_packages_copied

    - name: remove outdated pip packages
      file:
        path: "{{ pip_packages_remote_filesystem_repo_path }}"
        state: absent
      when: pip_packages_copied.changed

    # recreate the directory as it may be deleted in the previous step
    - name: create offline pip packages directory after cleanup
      file:
        path: "{{ pip_packages_remote_filesystem_repo_path }}"
        state: directory
      when: pip_packages_copied.changed

    - name: unarchive pip packages bundle on remote
      unarchive:
        src: "{{ pip_packages_remote_bundle_path }}/pip-repo.tar.gz"
        dest: "{{ pip_packages_remote_filesystem_repo_path }}"
        remote_src: yes
  when: pip_packages_local_bundle_file != ""

- block:
    - name: create offline containerd bundle directory
      file:
        path: "{{ containerd_remote_bundle_path }}"
        state: directory

    - name: upload containerd bundle to remote
      copy:
        src: "{{ containerd_local_bundle_file }}"
        dest: "{{ containerd_remote_bundle_path }}/{{ containerd_tar_file }}"
  when: containerd_local_bundle_file != ""

- block:
    - name: create nvidia directory
      file:
        path: "{{ nvidia_remote_bundle_path }}"
        state: directory

    - name: upload runfile artifact
      copy:
        src: "{{ nvidia_runfile_local_file }}"
        dest: "{{ nvidia_remote_bundle_path }}/{{ nvidia_runfile_installer }}"
        mode: 711
  when:
    - nvidia_runfile_local_file != ""
