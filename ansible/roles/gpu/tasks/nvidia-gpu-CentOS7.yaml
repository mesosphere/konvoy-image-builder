---
- name: install epel-release
  yum:
    name: epel-release
    state: present
    update_cache: true
  register: result
  until: result is success
  retries: 5
  delay: 3

- name: find this kernel headers
  yum:
    list: "kernel-headers-{{ hostvars[inventory_hostname].ansible_kernel }}"
  register: pkgheaders

- name: get CentOS specific release version
  slurp:
    src: /etc/centos-release
  register: os_release_file

# If possible we use headers from main OS repo for this kernel.
- name: Install Kernel Header and Devel from OS repo for Current Kernel
  yum:
    name:
      - "kernel-headers-{{ hostvars[inventory_hostname].ansible_kernel }}"
      - "kernel-devel-{{ hostvars[inventory_hostname].ansible_kernel }}"
  when: pkgheaders.results|length > 0
# CentOS VAULT - Kernel Headers not available in main OS repo anymore. Use Vault for this release
- name: CentOS VAULT - Kernel Headers not available in main OS repo anymore. Use Vault for this release
  # 2019-09-18: CentOS created new version 7.7.1908 and rebased the /7 repo.
  # But vault for 7.6.1810 is not available but mirror is
  when: pkgheaders.results|length == 0
  block:
    - name: ThisVault
      yum_repository:
        name: ThisVault
        description: This Vault
        baseurl: "{{ vault_repo_baseurl }}"
        enabled: false
    - name: ThisVault - Install Kernel Headers for Current Kernel
      yum:
        enablerepo: ThisVault
        name: "kernel-headers-{{ hostvars[inventory_hostname].ansible_kernel | regex_search('\\d+\\.\\d+\\.\\d+-\\d+') }}.el{{ hostvars[inventory_hostname].ansible_distribution_major_version }}"
    - name: ThisVault - Install Kernel Devel for Current Kernel
      yum:
        enablerepo: ThisVault
        name: "kernel-devel-{{ hostvars[inventory_hostname].ansible_kernel | regex_search('\\d+\\.\\d+\\.\\d+-\\d+') }}.el{{ hostvars[inventory_hostname].ansible_distribution_major_version }}"
  rescue:
    - name: Centos mirror this version
      yum_repository:
        name: CentosThisVersionMirror
        description: Centos mirror this version
        baseurl: "{{ mirror_repo_baseurl }}"
        enabled: false
    - name: CentosThisVersionMirror - register mirror as the repository to be used
      set_fact:
        old_package_repo: CentosThisVersionMirror
    - name: CentosThisVersionMirror - Install Kernel Headers for Current Kernel
      yum:
        enablerepo: "{{ old_package_repo }}"
        name: "kernel-headers-{{ hostvars[inventory_hostname].ansible_kernel | regex_search('\\d+\\.\\d+\\.\\d+-\\d+') }}.el{{ hostvars[inventory_hostname].ansible_distribution_major_version }}"
    - name: CentosThisVersionMirror - Install Kernel Devel for Current Kernel
      yum:
        enablerepo: "{{ old_package_repo }}"
        name: "kernel-devel-{{ hostvars[inventory_hostname].ansible_kernel | regex_search('\\d+\\.\\d+\\.\\d+-\\d+') }}.el{{ hostvars[inventory_hostname].ansible_distribution_major_version }}"
  always:
    - name: Ensure to link against merged kernel headers
      file:
        dest: "/lib/modules/{{ hostvars[inventory_hostname].ansible_kernel }}/build"
        src: "/usr/src/kernels/{{ hostvars[inventory_hostname].ansible_kernel | regex_search('\\d+\\.\\d+\\.\\d+-\\d+') }}.el{{ hostvars[inventory_hostname].ansible_distribution_major_version }}.x86_64/"
        force: yes
        state: link
        follow: false

# ensure nouveau being unloaded
- name: Ensure nouveau being unloaded
  modprobe:
    name: nouveau
    state: absent
  changed_when: False

# Download and install gpu runfile

- name: create nvidia install directory
  file:
    path: /opt/dkp/nvidia
    state: directory

- name: Download gpu runfile
  get_url:
    url: "{{ nvidia_runfile_installer_url }}"
    dest: /opt/dkp/nvidia/nvidia.run
    mode: 711
  when:
   - not offline_mode_enabled

- name: Extract driver source files
  shell: |
    /opt/dkp/nvidia/nvidia.run -x -s
  args:
    chdir: /opt/dkp/nvidia

- name: install gcc
  yum:
    name: gcc
    state: present
  register: result
  until: result is success
  retries: 5
  delay: 3

- name: Install driver
  shell:
    ./nvidia-installer -s -n \
      --kernel-name={{ ansible_kernel }} \
      --no-check-for-alternate-installs \
      --no-opengl-files \
      --no-distro-scripts \
      --kernel-install-path=$(pwd) \
      --log-file-name=$(pwd)/nvidia-installer.log || true
  args:
    chdir: /opt/dkp/nvidia/NVIDIA-Linux-x86_64-{{ nvidia_driver_version }}

- name: Create drivers dir
  file:
    path: /opt/drivers/nvidia
    state: directory

- name: Create lib dir
  file:
    path: /opt/drivers/nvidia/lib/modules/{{ ansible_kernel}}
    state: directory

- name: Create bin dir
  file:
    path: /opt/drivers/nvidia/bin
    state: directory

- name: Create ld.so conf dir
  file:
    path: /etc/ld.so.conf.d/
    state: directory

- name: Create ld.so conf for nvidia
  file:
    path: /etc/ld.so.conf.d/nvidia.conf
    state: touch

- name: Write location of library files
  lineinfile:
    path: /etc/ld.so.conf.d/nvidia.conf
    line: '/opt/drivers/nvidia/lib'
    insertbefore: BOF

- name: List all so files
  shell: ls /opt/dkp/nvidia/NVIDIA-Linux-x86_64-{{ nvidia_driver_version }}/*.so*
  register: so_glob

- name: Copy so files
  copy:
    remote_src: yes
    src: "{{ item }}"
    dest: /opt/drivers/nvidia/lib
  with_items: "{{ so_glob.stdout_lines }}"

- name: List all ko files
  shell: ls /opt/dkp/nvidia/NVIDIA-Linux-x86_64-{{ nvidia_driver_version }}/kernel/*.ko
  register: ko_glob

- name: Copy ko files
  copy:
    remote_src: yes
    src: "{{ item }}"
    dest: /opt/drivers/nvidia/lib/modules/{{ ansible_kernel }}
  with_items: "{{ ko_glob.stdout_lines }}"

- name: Load all libraries
  shell:
    ldconfig -r /
    depmod -b /
    modprobe -d / ipmi_devintf || true
    depmod -b   /opt/drivers/nvidia || true
    modprobe -d /opt/drivers/nvidia nvidia
    modprobe -d /opt/drivers/nvidia nvidia-modeset
    modprobe -d /opt/drivers/nvidia nvidia-uvm
  become: yes

- name: create systemd unit file for nvidia-driver service
  template:
    dest: /etc/systemd/system/nvidia-driver.service
    src: etc/systemd/system/nvidia-driver.service
    mode: 0600

- name: create systemd unit file for nvidia-persistenced service
  template:
    dest: /etc/systemd/system/nvidia-persistenced.service
    src: etc/systemd/system/nvidia-persistenced.service
    mode: 0600

- name: force systemd to reread configs
  ansible.builtin.systemd:
    daemon_reload: yes
    name: nvidia-driver
    enabled: yes
  become: yes

# libnvidia-container
- name: Add libnvidia-container repository
  yum_repository:
    name: libnvidia-container
    description: NVIDIA libnvidia-container repository
    enabled: false
    baseurl: "{{ libnvidia_container_repo_centos }}"
    gpgkey: "{{ libnvidia_container_repo_gpgkey }}"
    gpgcheck: true

- name: Install libnvidia-container
  yum:
    name: libnvidia-container1
    enablerepo: libnvidia-container
    state: present
  register: result
  until: result is success
  retries: 5
  delay: 3

- name: Add libnvidia-container-runtime repository
  yum_repository:
    name: nvidia-container-runtime
    description: NVIDIA libnvidia-container-runtime repository
    enabled: false
    baseurl: "{{ nvidia_container_runtime_repo_centos }}"
    gpgkey: "{{ nvidia_container_runtime_repo_gpgkey }}"
    gpgcheck: true

- name: Install nvidia-container-tools
  yum:
    name: libnvidia-container-tools
    enablerepo:
      - libnvidia-container
    state: present
  register: result
  until: result is success
  retries: 5
  delay: 3

- name: Install nvidia-container-runtime
  yum:
    name: "{{ nvidia_container_runtime_package }}"
    enablerepo:
      - nvidia-container-runtime
    state: present
  register: result
  until: result is success
  retries: 5
  delay: 3
