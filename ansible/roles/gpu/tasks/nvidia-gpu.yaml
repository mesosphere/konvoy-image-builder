---
- name: "NVIDIA Gpu - CentOS 7"
  include_tasks: nvidia-gpu-CentOS7.yaml
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version == '7'
- name: "NVIDIA Gpu - RHEL 7"
  include_tasks: nvidia-gpu-RHEL7.yaml
  when: ansible_distribution == 'RedHat' and ansible_distribution_major_version == '7'
- name: "NVIDIA Gpu - RHEL 8"
  include_tasks: nvidia-gpu-RHEL8.yaml
  when: ansible_distribution == 'RedHat' and ansible_distribution_major_version == '8'
- name: "NVIDIA Gpu - SLES 15"
  include_tasks: nvidia-gpu-SLES15.yaml
  when: ansible_distribution == "SLES" and ansible_distribution_major_version == '15'
- name: "NVIDIA Gpu - Flatcar"
  include_tasks: nvidia-gpu-Flatcar.yaml
  when: ansible_distribution == "Flatcar"
- name: "NVIDIA Gpu - Ubuntu 20"
  include_tasks: nvidia-gpu-Ubuntu20.yaml
  when: ansible_distribution == "Ubuntu"

# Common tasks for install cuda+device drivers
# ensure nouveau being unloaded
- name: Ensure nouveau being unloaded
  modprobe:
    name: nouveau
    state: absent
  changed_when: False

# Download and install gpu runfile

- name: create nvidia install directory
  file:
    path: /opt/dkp/nvidia
    state: directory

- name: download gpu runfile
  get_url:
    url: "{{ nvidia_runfile_installer_url }}"
    dest: /opt/dkp/nvidia/nvidia-{{ nvidia_driver_version }}.run
    mode: 711
  when:
   - not offline_mode_enabled

- name: extract driver source files
  shell: |
    /opt/dkp/nvidia/nvidia-{{ nvidia_driver_version }}.run -x -s
  args:
    chdir: /opt/dkp/nvidia
  become: yes

- name: install driver
  shell:
    ./nvidia-installer -s -n \
      --kernel-name={{ ansible_kernel }} \
      --no-check-for-alternate-installs \
      --no-opengl-files \
      --no-distro-scripts \
      --kernel-install-path=$(pwd) \
      --log-file-name=$(pwd)/nvidia-installer.log || true
  args:
    chdir: /opt/dkp/nvidia/NVIDIA-Linux-x86_64-{{ nvidia_driver_version }}

- name: Create drivers dir
  file:
    path: /opt/drivers/nvidia
    state: directory

- name: Create lib dir
  file:
    path: /opt/drivers/nvidia/lib/modules/{{ ansible_kernel}}
    state: directory

- name: Create bin dir
  file:
    path: /opt/drivers/nvidia/bin
    state: directory

- name: Create ld.so conf dir
  file:
    path: /etc/ld.so.conf.d/
    state: directory

- name: Create ld.so conf for nvidia
  file:
    path: /etc/ld.so.conf.d/nvidia.conf
    state: touch

- name: Write location of library files
  lineinfile:
    path: /etc/ld.so.conf.d/nvidia.conf
    line: '/usr/lib64'
    insertbefore: BOF

- name: List all so files
  shell: ls /opt/dkp/nvidia/NVIDIA-Linux-x86_64-{{ nvidia_driver_version }}/*.so*
  register: so_glob

- name: Copy so files
  copy:
    remote_src: yes
    src: "{{ item }}"
    dest: /usr/lib64
  with_items: "{{ so_glob.stdout_lines }}"

- name: List all ko files
  shell: ls /opt/dkp/nvidia/NVIDIA-Linux-x86_64-{{ nvidia_driver_version }}/kernel/*.ko
  register: ko_glob

- name: Copy ko files
  copy:
    remote_src: yes
    src: "{{ item }}"
    dest: /lib/modules/{{ ansible_kernel }}
  with_items: "{{ ko_glob.stdout_lines }}"

- name: copy script
  copy:
    dest: /opt/dkp/nvidia/nvidia-service.sh
    src: ./nvidia-service.sh
    mode: 711

- name: create systemd unit file for nvidia-driver service
  template:
    dest: /etc/systemd/system/nvidia-driver.service
    src: etc/systemd/system/nvidia-driver.service
    mode: 0600

- name: create systemd unit file for nvidia-persistenced service
  template:
    dest: /etc/systemd/system/nvidia-persistenced.service
    src: etc/systemd/system/nvidia-persistenced.service
    mode: 0600

- name: force systemd to reread configs
  ansible.builtin.systemd:
    daemon_reload: yes
    name: nvidia-driver
    enabled: yes
    state: restarted
  become: yes
