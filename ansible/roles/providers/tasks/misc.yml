---
# Create a boot order configuration
# b/w containerd and cloud final, cloud config services

- name: Creates unit file directory for cloud-final
  file:
    path: /etc/systemd/system/cloud-final.service.d
    state: directory

- name: Create cloud-final boot order drop in file
  copy:
    dest: /etc/systemd/system/cloud-final.service.d/boot-order.conf
    src: etc/systemd/system/cloud-final.service.d/boot-order.conf
    owner: root
    group: root
    mode: "0755"

- name: Creates unit file directory for cloud-config
  file:
    path: /etc/systemd/system/cloud-config.service.d
    state: directory

- name: Create cloud-final boot order drop in file
  copy:
    dest: /etc/systemd/system/cloud-config.service.d/boot-order.conf
    src: etc/systemd/system/cloud-config.service.d/boot-order.conf
    owner: root
    group: root
    mode: "0755"

# Some OS might disable cloud-final service on boot (rhel 7).
# Enable all cloud-init services on boot.
- name: Make sure all cloud init services are enabled
  service:
    name: "{{ item }}"
    enabled: yes
  with_items:
    - cloud-final
    - cloud-config
    - cloud-init
    - cloud-init-local
  when: ansible_os_family != "Flatcar"

- name: Create cloud-init config file
  copy:
    src: files/etc/cloud/cloud.cfg.d/05_logging.cfg
    dest: /etc/cloud/cloud.cfg.d/05_logging.cfg
    owner: root
    group: root
    mode: 0644
  when: ansible_os_family != "Flatcar"

- name: Get cloud-init version
  block:
  - name: Run cloud-init --version
    command: cloud-init --version
    register: system_cloud_init_cmd
  - name: Set cloud-init version fact
    set_fact:
      system_cloud_init_version: "{{ system_cloud_init_cmd.stdout | regex_replace('^.*cloud-init\\s+(\\d+.*)$', '\\1') }}"
  - name: Set cloud-init version fact from stderr
    set_fact:
      system_cloud_init_version: "{{ system_cloud_init_cmd.stderr | regex_replace('^.*cloud-init\\s+(\\d+.*)$', '\\1') }}"
    when: not system_cloud_init_version
  when: ansible_os_family != "Flatcar"

- name: set cloudinit feature flags
  copy:
    src: usr/lib/python3/dist-packages/cloudinit/feature_overrides.py
    dest: "{{ sysusr_prefix }}/lib/python3/dist-packages/cloudinit/feature_overrides.py"
    owner: root
    group: root
    mode: 0644
  when: ansible_os_family == "Debian" and system_cloud_init_version is version('20.0.0', '>')

- name: get python3 location for non-debian
  register: python3_version
  shell: python3 -c "import sysconfig; print(sysconfig.get_path('purelib'))"
  when: ansible_os_family not in ["Debian", "Flatcar"]

- name: set cloudinit feature flags for non debian systems
  copy:
    src: usr/lib/python3/dist-packages/cloudinit/feature_overrides.py
    dest: "{{ python3_version.stdout }}/cloudinit/feature_overrides.py"
    owner: root
    group: root
    mode: 0644
  when: ansible_os_family not in ["Debian", "Flatcar"] and system_cloud_init_version is version('20.0.0', '>')

- name: Ensure chrony is running
  systemd:
    enabled: yes
    state: started
    daemon_reload: yes
    name: chronyd
  when: (packer_builder_type.startswith('amazon') or
    packer_builder_type.startswith('azure') or
    packer_builder_type.startswith('googlecompute') or
    packer_builder_type is search('vmware') or
    packer_builder_type is search('vsphere')) and
    ansible_os_family != "Flatcar"

- name: Set and persist kernel params
  ansible.posix.sysctl:
    name: "{{ item.param }}"
    value: "{{ item.val }}"
    state: present
    sysctl_set: true
    sysctl_file: "{{ sysctl_conf_file }}"
    reload: true
  loop:
    - { param: fs.inotify.max_user_instances, val: 8192 }
    - { param: fs.inotify.max_user_watches, val: 524288 }
