on:
  push:
    tags:
      - 'v*'

name: Build Images
jobs:
  builde2e:
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        os:
        - "centos 7.9"
        - "redhat 7.9"
        - "redhat 8.4"
        - "redhat 8.6"
        - "oracle 7.9"
        - "rocky 9.0"
        - "rocky 9.1"
        - "sles 15"
        - "ubuntu 20.04"
        buildConfig:
        - "basic"
        - "fips"
        - "nvidia"
        - "offline"
        - "offline-fips"
        - "offline-nvidia"
        cloud_provider:
        - "aws"
        - "azure"
        - "gcp"
        - "ova"
        exclude:
        - os: "centos 7.9"
          cloud_provider: aws
          buildConfig: "basic"
        - os: "centos 7.9"
          cloud_provider: aws
          buildConfig: "fips"
        - os: "centos 7.9"
          cloud_provider: aws
          buildConfig: "nvidia"
        - os: "centos 7.9"
          cloud_provider: aws
          buildConfig: "offline-nvidia"
        - os: "oracle 7.9"
          cloud_provider: aws
          buildConfig: "basic"
        - os: "oracle 7.9"
          cloud_provider: aws
          buildConfig: "nvidia"
        - os: "oracle 7.9"
          cloud_provider: aws
          buildConfig: "offline"
        - os: "oracle 7.9"
          cloud_provider: aws
          buildConfig: "offline-fips"
        - os: "oracle 7.9"
          cloud_provider: aws
          buildConfig: "offline-nvidia"
        - os: "redhat 7.9"
          cloud_provider: aws
          buildConfig: "basic"
        - os: "redhat 7.9"
          cloud_provider: aws
          buildConfig: "fips"
        - os: "redhat 7.9"
          cloud_provider: aws
          buildConfig: "nvidia"
        - os: "redhat 7.9"
          cloud_provider: aws
          buildConfig: "offline-nvidia"
        - os: "redhat 8.4"
          cloud_provider: aws
          buildConfig: "basic"
        - os: "redhat 8.4"
          cloud_provider: aws
          buildConfig: "fips"
        - os: "redhat 8.4"
          cloud_provider: aws
          buildConfig: "nvidia"
        - os: "redhat 8.4"
          cloud_provider: aws
          buildConfig: "offline-nvidia"
        - os: "redhat 8.6"
          cloud_provider: aws
          buildConfig: "basic"
        - os: "redhat 8.6"
          cloud_provider: aws
          buildConfig: "fips"
        - os: "redhat 8.6"
          cloud_provider: aws
          buildConfig: "nvidia"
        - os: "redhat 8.6"
          cloud_provider: aws
          buildConfig: "offline-nvidia"
        - os: "sles 15"
          cloud_provider: aws
          buildConfig: "fips"
        - os: "sles 15"
          cloud_provider: aws
          buildConfig: "nvidia"
        - os: "sles 15"
          cloud_provider: aws
          buildConfig: "offline-fips"
        - os: "sles 15"
          cloud_provider: aws
          buildConfig: "offline-nvidia"

        - os: "rocky 9.0"
          cloud_provider: aws

        - os: "rocky 9.1"
          cloud_provider: aws
          buildConfig: "basic"
        - os: "rocky 9.1"
          cloud_provider: aws
          buildConfig: "fips"
        - os: "rocky 9.1"
          cloud_provider: aws
          buildConfig: "nvidia"
        - os: "rocky 9.1"
          cloud_provider: aws
          buildConfig: "offline-fips"
        - os: "rocky 9.1"
          cloud_provider: aws
          buildConfig: "offline-nvidia"

        - os: "ubuntu 20.04"
          cloud_provider: aws
          buildConfig: "basic"
        - os: "ubuntu 20.04"
          cloud_provider: aws
          buildConfig: "fips"
        - os: "ubuntu 20.04"
          cloud_provider: aws
          buildConfig: "offline"
        - os: "ubuntu 20.04"
          cloud_provider: aws
          buildConfig: "offline-fips"
        - os: "ubuntu 20.04"
          cloud_provider: aws
          buildConfig: "offline-nvidia"

          # Azure we only build rocky and ubuntu basic
        - os: "centos 7.9"
          cloud_provider: azure
        - os: "redhat 7.9"
          cloud_provider: azure
        - os: "redhat 8.4"
          cloud_provider: azure
        - os: "redhat 8.6"
          cloud_provider: azure
        - os: "oracle 7.9"
          cloud_provider: azure
        - os: "sles 15"
          cloud_provider: azure
        - os: "rocky 9.1" # TODO: remove when 9.1 is published
          cloud_provider: azure
        - buildConfig: "fips"
          cloud_provider: azure
        - buildConfig: "nvidia"
          cloud_provider: azure
        - buildConfig: "offline"
          cloud_provider: azure
        - buildConfig: "offline-fips"
          cloud_provider: azure
        - buildConfig: "offline-nvidia"
          cloud_provider: azure

          # GCP we only build ubuntu basic
        - os: "centos 7.9"
          cloud_provider: gcp
        - os: "oracle 7.9"
          cloud_provider: gcp
        - os: "redhat 7.9"
          cloud_provider: gcp
        - os: "redhat 8.4"
          cloud_provider: gcp
        - os: "redhat 8.6"
          cloud_provider: gcp
        - os: "sles 15"
          cloud_provider: gcp
        - os: "rocky 9.0"
          cloud_provider: gcp
        - os: "rocky 9.1"
          cloud_provider: gcp
        - buildConfig: "fips"
          cloud_provider: gcp
        - buildConfig: "nvidia"
          cloud_provider: gcp
        - buildConfig: "offline"
          cloud_provider: gcp
        - buildConfig: "offline-fips"
          cloud_provider: gcp
        - buildConfig: "offline-nvidia"
          cloud_provider: gcp

        # OVA we only build rhel 8.4 fips offline and rocky + ubuntu offline
        - buildConfig: "basic"
          cloud_provider: ova
        - buildConfig: "fips"
          cloud_provider: ova
        - buildConfig: "nvidia"
          cloud_provider: ova
        - buildConfig: "offline-nvidia"
          cloud_provider: ova
        - os: "centos 7.9"
          cloud_provider: ova
        - os: "oracle 7.9"
          cloud_provider: ova
        - os: "redhat 7.9"
          cloud_provider: ova
        - os: "sles 15"
          cloud_provider: ova
        - os: "rocky 9.0"
          cloud_provider: ova

        - os: "redhat 8.4"
          cloud_provider: ova
          buildConfig: "basic"
        - os: "redhat 8.4"
          cloud_provider: ova
          buildConfig: "fips"
        - os: "redhat 8.4"
          cloud_provider: ova
          buildConfig: "nvidia"
        - os: "redhat 8.4"
          cloud_provider: ova
          buildConfig: "offline-nvidia"

        - os: "redhat 8.6"
          cloud_provider: ova
          buildConfig: "basic"
        - os: "redhat 8.6"
          cloud_provider: ova
          buildConfig: "fips"
        - os: "redhat 8.6"
          cloud_provider: aws
          buildConfig: "nvidia"
        - os: "redhat 8.6"
          cloud_provider: ova
          buildConfig: "offline-nvidia"

        - os: "rocky 9.1"
          cloud_provider: ova
          buildConfig: "basic"
        - os: "rocky 9.1"
          cloud_provider: ova
          buildConfig: "fips"
        - os: "rocky 9.1"
          cloud_provider: ova
          buildConfig: "nvidia"
        - os: "rocky 9.1"
          cloud_provider: ova
          buildConfig: "offline-fips"
        - os: "rocky 9.1"
          cloud_provider: ova
          buildConfig: "offline-nvidia"

        - os: "ubuntu 20.04"
          cloud_provider: ova
          buildConfig: "basic"
        - os: "ubuntu 20.04"
          cloud_provider: ova
          buildConfig: "fips"
        - os: "ubuntu 20.04"
          cloud_provider: ova
          buildConfig: "nvidia"
        - os: "ubuntu 20.04"
          cloud_provider: ova
          buildConfig: "offline-fips"
        - os: "ubuntu 20.04"
          cloud_provider: ova
          buildConfig: "offline-nvidia"
    runs-on: self-hosted
    continue-on-error: true
    steps:
      - name: Checkout konvoy-image-builder repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Login to dockerhub Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.NEXUS_USERNAME }}
          password: ${{ secrets.NEXUS_PASSWORD }}

      - name: Login to D2iQ's Mirror Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.D2IQ_DOCKER_MIRROR_REGISTRY}}
          username: ${{ secrets.NEXUS_USERNAME }}
          password: ${{ secrets.NEXUS_PASSWORD }}

      - name: Setup buildkit
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/konvoy-image-builder
          aws-region: us-west-2

      - name: Setup GOOGLE_APPLICATION_CREDENTIALS
        run: |-
          echo -n "${GOOGLE_APPLICATION_CREDENTIALS_E2E_BASE64}" | base64 --decode >> google-credentials.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=google-credentials.json" >> $GITHUB_ENV
        env:
          GOOGLE_APPLICATION_CREDENTIALS_E2E_BASE64: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_E2E_BASE64 }}

      - name: Build Image ${{ matrix.os }} with ${{ matrix.buildConfig }} for ${{ matrix.cloud_provider }}
        uses: magefile/mage-action@v2
        with:
          version: latest
          args: runE2e "${{ matrix.os }}" "${{ matrix.buildConfig }}" "${{ matrix.cloud_provider }}" false
        env:
          SSH_BASTION_KEY_CONTENTS: ${{ secrets.SSH_BASTION_KEY_CONTENTS }}
          SSH_BASTION_HOST: ${{ secrets.SSH_BASTION_HOST }}
          SSH_BASTION_USERNAME: ${{ secrets.SSH_BASTION_USERNAME }}
          VSPHERE_USERNAME: ${{ secrets.VSPHERE_USERNAME }}
          VSPHERE_PASSWORD: ${{ secrets.VSPHERE_PASSWORD }}
          VSPHERE_SERVER: ${{ secrets.VSPHERE_SERVER }}
          GITHUB_TOKEN: ${{ secrets.MESOSPHERECI_USER_TOKEN }}
          AZURE_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
          AZURE_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          AZURE_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
          AZURE_CLIENT_SECRET: "${{ secrets.AZURE_CLIENT_SECRET }}"
