{
  "variables": {
    "ami_groups": "",
    "ami_regions": "us-west-2",
    "ami_users": "",
    "ansible_extra_vars": "",
    "aws_access_key": "",
    "aws_profile": "",
    "aws_region": "us-west-2",
    "aws_secret_key": "",
    "aws_instance_type": "t3.small",
    "build_name": "",
    "build_name_extra": "",
    "build_timestamp": "{{timestamp}}",
    "distribution": "",
    "distribution_version": "",
    "encrypted": "false",
    "existing_ansible_ssh_args": "{{env `ANSIBLE_SSH_ARGS`}}",
    "extra_vars_file": "",
    "gpu": "false",
    "gpu_nvidia_version": "",
    "gpu_types": "",
    "iam_instance_profile": "",
    "konvoy_image_builder_version": "0.0.1",
    "kms_key_id": "",
    "kubernetes_full_version": "",
    "manifest_output": "manifest.json",
    "python_path": "",
    "security_group_id":  "",
    "ssh_bastion_host": "{{ user `ssh_bastion_host`}}",
    "ssh_bastion_username": "{{ user `ssh_bastion_username`}}",
    "ssh_bastion_password": "{{ user `ssh_bastion_password`}}",
    "ssh_bastion_private_key_file": "{{ user `ssh_bastion_private_key_file` }}",
    "skip_profile_validation": "false",
    "snapshot_groups": "all",
    "snapshot_users": "",
    "subnet_id": "",
    "vpc_id": "",
    "volume_size": "20"
  },
  "builders": [
    {
      "name": "{{(user `distribution`) | lower}}-{{user `distribution_version`}}{{user `build_name_extra`}}",
      "type": "amazon-ebs",
      "instance_type": "{{user `aws_instance_type`}}",
      ((- if .SourceAMIDefined ))
      "source_ami": "{{user `source_ami`}}",
      ((- else ))
      "source_ami_filter": {
        "filters": {
          "virtualization-type": "hvm",
          "name": "{{user `ami_filter_name`}}",
          "root-device-type": "ebs",
          "architecture": "x86_64"
        },
        "owners": "{{user `ami_filter_owners`}}",
        "most_recent": true
      },
      ((- end ))
      ((- if .DryRun ))
      "skip_create_ami": true,
      ((- end ))
      "ami_name": "konvoy-ami-{{user `build_name`}}-{{user `kubernetes_full_version` | clean_resource_name}}-{{user `build_timestamp`}}",
      "snapshot_tags": {
        "ami_name": "konvoy-ami-{{user `build_name`}}-{{user `kubernetes_full_version` | clean_resource_name}}-{{user `build_timestamp`}}"
      },
      "ami_groups": "{{user `ami_groups`}}",
      "ami_users": "{{user `ami_users`}}",
      "ami_description": "Konvoy base for Kubernetes {{user `kubernetes_full_version`}} on {{user `distribution`}}-{{user `distribution_version`}}",
      "snapshot_groups": "{{user `snapshot_groups`}}",
      "snapshot_users": "{{user `snapshot_users`}}",
      "encrypt_boot": "{{user `encrypted`}}",
      "kms_key_id": "{{user `kms_key_id`}}",
      "ami_product_codes": "",
      "ami_regions": "{{user `ami_regions`}}",
      "access_key": "{{user `aws_access_key`}}",
      "profile": "{{ user `aws_profile`}}",
      "region": "{{ user `aws_region` }}",
      "secret_key": "{{user `aws_secret_key`}}",
      "iam_instance_profile": "{{user `iam_instance_profile`}}",
      "skip_profile_validation": "{{user `skip_profile_validation`}}",
      "ssh_username": "{{user `ssh_username`}}",
      "ssh_key_exchange_algorithms": [
        "curve25519-sha256@libssh.org",
        "ecdh-sha2-nistp256",
        "ecdh-sha2-nistp384",
        "ecdh-sha2-nistp521",
        "diffie-hellman-group14-sha1",
        "diffie-hellman-group1-sha1"
      ],
      "vpc_id": "{{ user `vpc_id` }}",
      "ssh_bastion_host": "{{ user `ssh_bastion_host` }}",
      "ssh_bastion_username": "{{ user  `ssh_bastion_username` }}",
      "ssh_bastion_password": "{{ user `ssh_bastion_password` }}",
      "ssh_bastion_private_key_file": "{{ user `ssh_bastion_private_key_file` }}",
      "subnet_id": "{{ user `subnet_id` }}",
      "security_group_id": "{{ user `security_group_id` }}",
      "tags": {
        "build_date": "{{isotime}}",
        "build_timestamp": "{{user `build_timestamp`}}",
        "containerd_version": "{{user `containerd_version`}}",
        "distribution": "{{user `distribution`}}",
        "distribution_version": "{{user `distribution_version`}}",
        "gpu": "{{user `gpu`}}",
        "gpu_nvidia_version": "{{user `gpu_nvidia_version`}}",
        "gpu_types": "{{user `gpu_types`}}",
        "image_builder_version": "{{user `konvoy_image_builder_version`}}",
        "kubernetes_cni_version": "{{user `kubernetes_cni_version`}}",
        "kubernetes_version": "{{user `kubernetes_full_version` | clean_resource_name}}",
        "source_ami": "{{.SourceAMI}}"
      },
      "launch_block_device_mappings": [
        {
          "device_name": "{{ user `root_device_name` }}",
          "volume_size": "{{ user `volume_size` }}",
          "volume_type": "gp3",
          "delete_on_termination": true
        }
      ]
    }
  ],
  "provisioners": [
    {
      "type": "shell",
      "environment_vars": [
        "HTTP_PROXY={{user `http_proxy`}}",
        "http_proxy={{user `http_proxy`}}",
        "HTTPS_PROXY={{user `https_proxy`}}",
        "https_proxy={{user `https_proxy`}}",
        "NO_PROXY={{user `no_proxy`}}",
        "no_proxy={{user `no_proxy`}}",
        "BUILD_NAME={{user `build_name`}}"
      ],
      "inline": [
        "if [ $BUILD_NAME != \"ubuntu-1804\" ]; then exit 0; fi",
        "while [ ! -f /var/lib/cloud/instance/boot-finished ]; do echo 'Waiting for cloud-init...'; sleep 1; done",
        "sudo apt-get -qq update && sudo DEBIAN_FRONTEND=noninteractive apt-get -qqy install python python-pip"
      ]
    },
    {
      "type": "shell",
      "environment_vars": [
        "HTTP_PROXY={{user `http_proxy`}}",
        "http_proxy={{user `http_proxy`}}",
        "HTTPS_PROXY={{user `https_proxy`}}",
        "https_proxy={{user `https_proxy`}}",
        "NO_PROXY={{user `no_proxy`}}",
        "no_proxy={{user `no_proxy`}}",
        "BUILD_NAME={{user `build_name`}}"
      ],
      "script": "./packer/files/no-update-flatcar.sh",
      "execute_command": "BUILD_NAME={{user `build_name`}}; if [[ \"${BUILD_NAME}\" == *\"flatcar\"* ]]; then sudo {{.Vars}} -S -E bash '{{.Path}}'; fi"
    },
    {
      "type": "shell",
      "environment_vars": [
        "HTTP_PROXY={{user `http_proxy`}}",
        "http_proxy={{user `http_proxy`}}",
        "HTTPS_PROXY={{user `https_proxy`}}",
        "https_proxy={{user `https_proxy`}}",
        "NO_PROXY={{user `no_proxy`}}",
        "no_proxy={{user `no_proxy`}}",
        "BUILD_NAME={{user `build_name`}}"
      ],
      "script": "./packer/files/no-update-flatcar.sh",
      "execute_command": "BUILD_NAME={{ user `build_name`}}; if [[ \"${BUILD_NAME}\" == *\"flatcar\"* ]]; then sudo {{.Vars}} -S -E bash '{{.Path}}'; fi"
    },
    {
      "type": "shell",
      "environment_vars": [
        "BUILD_NAME={{ user `build_name`}}"
      ],
      "script": "./packer/files/no-update-flatcar.sh",
      "execute_command": "BUILD_NAME={{build_name}}; if [[ \"${BUILD_NAME}\" == *\"flatcar\"* ]]; then sudo {{.Vars}} -S -E bash '{{.Path}}'; fi"
    },
    {
      "type": "shell",
      "environment_vars": [
        "BUILD_NAME={{build_name}}"
      ],
      "script": "./packer/files/no-update-flatcar.sh",
      "execute_command": "BUILD_NAME={{build_name}}; if [[ \"${BUILD_NAME}\" == *\"flatcar\"* ]]; then sudo {{.Vars}} -S -E bash '{{.Path}}'; fi"
    },
    {
      "type": "shell",
      "environment_vars": [
        "BUILD_NAME={{build_name}}"
      ],
      "script": "./packer/files/bootstrap-flatcar.sh",
      "execute_command": "BUILD_NAME={{ user `build_name`}}; if [[ \"${BUILD_NAME}\" == *\"flatcar\"* ]]; then sudo {{.Vars}} -S -E bash '{{.Path}}'; fi"
    },
    {
      "type": "ansible",
      "playbook_file": "./ansible/provision.yaml",
      "user": "{{user `ssh_username`}}",
      "ansible_env_vars": [
        "ANSIBLE_SSH_ARGS='{{user `existing_ansible_ssh_args`}} -o IdentitiesOnly=yes -o HostkeyAlgorithms=+ssh-rsa -o PubkeyAcceptedAlgorithms=+ssh-rsa'",
        "ANSIBLE_REMOTE_TEMP='/tmp/.ansible/'"
      ],
      "extra_arguments": [
        "--extra-vars",
        "{{ user `ansible_extra_vars` }}"
      ]
    },
    {
      "type": "shell",
      "inline": [
        "mkdir -p /tmp/.goss-dir"
      ]
    },
    {
        "type": "file",
        "source": "/usr/local/bin/goss",
        "destination": "/tmp/.goss-dir/goss",
        "direction": "upload",
        "max_retries": 10
    },
    {
      "arch": "{{user `goss_arch`}}",
      "format": "{{user `goss_format`}}",
      "format_options": "{{user `goss_format_options`}}",
      "goss_file": "{{user `goss_entry_file`}}",
      "inspect": "{{user `goss_inspect_mode`}}",
      "skip_install": true,
      "download_path": "/tmp/.goss-dir/goss",
      "type": "goss",
      "tests": [
        "{{user `goss_tests_dir`}}"
      ],
      "url": "{{user `goss_url`}}",
      "use_sudo": true,
      "vars_file": "{{user `goss_vars_file`}}",
      "vars_inline": {
        "ARCH": "amd64",
        "OS": "{{user `distribution` | lower}}",
        "PROVIDER": "amazon"
      },
      "vars_env": {
        "HTTP_PROXY": "{{user `http_proxy`}}",
        "http_proxy": "{{user `http_proxy`}}",
        "HTTPS_PROXY": "{{user `https_proxy`}}",
        "https_proxy": "{{user `https_proxy`}}",
        "NO_PROXY": "{{user `no_proxy`}}",
        "no_proxy": "{{user `no_proxy`}}"
      },
      "version": "{{user `goss_version`}}"
    },
    {
      "type": "shell",
      "inline": [
        "rm -r  /tmp/.goss-dir"
      ]
    }
  ],
  "post-processors": [
    {
      "type": "manifest",
      "output": "{{user `manifest_output`}}",
      "custom_data": {
        "containerd_version": "{{user `containerd_version`}}",
        "kubernetes_cni_version": "{{user `kubernetes_cni_semver`}}",
        "kubernetes_version": "{{user `kubernetes_full_version`}}",
        "distribution": "{{user `distribution`}}",
        "distribution_version": "{{user `distribution_version`}}"
      }
    }
  ]
}
