packer {
  required_plugins {
    amazon = {
      version = ">= 1.1.3"
      source = "github.com/hashicorp/amazon"
  }
}

variable "ami_groups" {
  type    = string
  default = ""
}

variable "ami_regions" {
  type    = string
  default = "us-west-2"
}

variable "ami_users" {
  type    = string
  default = ""
}

variable "ansible_extra_vars" {
  type    = string
  default = ""
}

variable "aws_access_key" {
  type    = string
  default = ""
}

variable "aws_instance_type" {
  type    = string
  default = "t3.small"
}

variable "aws_profile" {
  type    = string
  default = ""
}

variable "aws_region" {
  type    = string
  default = "us-west-2"
}

variable "aws_secret_key" {
  type    = string
  default = ""
}

variable "build_name" {
  type    = string
  default = ""
}

variable "build_name_extra" {
  type    = string
  default = ""
}

variable "distribution" {
  type    = string
  default = ""
}

variable "distribution_version" {
  type    = string
  default = ""
}

variable "encrypted" {
  type    = bool
  default = false
}

variable "existing_ansible_ssh_args" {
  type    = string
  default = "${env("ANSIBLE_SSH_ARGS")}"
}

variable "extra_vars_file" {
  type    = string
  default = ""
}

variable "gpu" {
  type    = string
  default = "false"
}

variable "gpu_nvidia_version" {
  type    = string
  default = ""
}

variable "gpu_types" {
  type    = string
  default = ""
}

variable "iam_instance_profile" {
  type    = string
  default = ""
}

variable "kms_key_id" {
  type    = string
  default = ""
}

variable "konvoy_image_builder_version" {
  type    = string
  default = "0.0.1"
}

variable "kubernetes_full_version" {
  type    = string
  default = ""
}

variable "manifest_output" {
  type    = string
  default = "manifest.json"
}

variable "python_path" {
  type    = string
  default = ""
}

variable "security_group_id" {
  type    = string
  default = ""
}

variable "skip_profile_validation" {
  type    = bool
  default = false
}

variable "snapshot_groups" {
  type    = string
  default = "all"
}

variable "snapshot_users" {
  type    = string
  default = ""
}

variable "subnet_id" {
  type    = string
  default = ""
}

variable "volume_size" {
  type    = string
  default = "20"
}

variable "vpc_id" {
  type    = string
  default = ""
}

variable "ssh_username" {
  type    = string
  default = ""
}

variable "http_proxy" {
  type    = string
  default = ""
}

variable "root_device_name" {
  type    = string
  default = ""
}

variable "ssh_bastion_host" {
  type    = string
  default = ""
}

variable "ssh_bastion_password" {
  type    = string
  default = ""
}

variable "ssh_bastion_private_key_file" {
  type    = string
  default = ""
}

variable "ssh_bastion_username" {
  type    = string
  default = ""
}

variable "ami_filter_owners" {
  type    = string
  default = ""
}

variable "ami_filter_name" {
  type    = string
  default = ""
}

variable "source_ami" {
  type    = string
  default = ""
}

variable "containerd_version" {
  type    = string
  default = ""
}

variable "https_proxy" {
  type    = string
  default = ""
}

variable "no_proxy" {
  type    = string
  default = ""
}

variable "kubernetes_cni_version" {
  type    = string
  default = ""
}

variable "kubernetes_cni_semver" {
  type    = string
  default = ""
}

variable "goss_binary" {
  type = string
  default = "/usr/local/bin/goss-amd64"
}

variable "goss_entry_file" {
  type    = string
  default = null
}

variable "goss_inspect_mode" {
  type    = bool
  default = false
}

variable "goss_tests_dir" {
  type    = string
  default = null
}

variable "goss_url" {
  type    = string
  default = null
}

variable "goss_vars_file" {
  type    = string
  default = null
}
variable "goss_format" {
  type    = string
  default = null
}
variable "goss_format_options" {
  type    = string
  default = null
}
variable "goss_arch" {
  type    = string
  default = null
}
variable "goss_version" {
  type    = string
  default = null
}

variable "dry_run" {
  type    = bool
  default = false
}

variable "remote_folder" {
  type    = string
  default = "/tmp"
}

variable "run_tags" {
  type    = map(string)
  default = null
}


# The amazon-ami data block is generated from your amazon builder source_ami_filter; a data
# from this block can be referenced in source and locals blocks.
# Read the documentation for data blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/data
# Read the documentation for the Amazon AMI Data Source here:
# https://www.packer.io/docs/datasources/amazon/ami
data "amazon-ami" "autogenerated_1" {
  access_key = var.aws_access_key
  filters = var.source_ami != "" ? {} : {
    architecture        = "x86_64"
    name                = var.ami_filter_name
    root-device-type    = "ebs"
    virtualization-type = "hvm"
  }
  most_recent = true
  # owners is required field. Default to "self" which will point to user's AWS account
  owners      = var.ami_filter_owners == "" ? ["self"] : split(",", var.ami_filter_owners)
  profile     = var.aws_profile
  region      = var.aws_region
  secret_key  = var.aws_secret_key
}

# "timestamp" template function replacement
locals { timestamp = regex_replace(timestamp(), "[- TZ:]", "") }

# All locals variables are generated from variables that uses expressions
# that are not allowed in HCL2 variables.
# Read the documentation for locals blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/locals
locals {
  build_timestamp              = "${local.timestamp}"
  ssh_bastion_host             = "${var.ssh_bastion_host}"
  ssh_bastion_password         = "${var.ssh_bastion_password}"
  ssh_bastion_private_key_file = "${var.ssh_bastion_private_key_file}"
  ssh_bastion_username         = "${var.ssh_bastion_username}"
  source_ami                   = var.source_ami == "" ? data.amazon-ami.autogenerated_1.id : var.source_ami
  gen_ami_name                 = "konvoy-ami-${var.build_name}-${var.kubernetes_full_version}-${local.build_timestamp}"
  # clean_resource_name https://github.com/hashicorp/packer-plugin-amazon/blob/f1ebbbf409f4863de79a0474ef64d3576faad0e4/builder/common/template_funcs.go#L24
  ami_name                     = regex_replace(local.gen_ami_name, "[^A-Za-z0-9\\(\\)\\[\\] \\.\\/\\\\\\-\\'\\@_]", "-")
}

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/source
# could not parse template for following block: "template: hcl2_upgrade:2: bad character U+0060 '`'"

source "amazon-ebs" "kib_image" {
  access_key           = var.aws_access_key
  ami_description      = "Konvoy base for Kubernetes ${var.kubernetes_full_version} on ${var.distribution}-${var.distribution_version}"
  ami_groups           = var.ami_groups == "" ? null : split(",", var.ami_groups)
  ami_name             = local.ami_name
  ami_product_codes    = null
  ami_regions          = var.ami_regions == "" ? null : split(",", var.ami_regions)
  ami_users            = var.ami_users == "" ? null : split(",", var.ami_users)
  encrypt_boot         = var.encrypted
  iam_instance_profile = var.iam_instance_profile == "" ? null : var.iam_instance_profile
  instance_type        = var.aws_instance_type
  kms_key_id           = var.kms_key_id == "" ? null : var.kms_key_id
  launch_block_device_mappings {
    delete_on_termination = true
    device_name           = var.root_device_name
    volume_size           = var.volume_size
    volume_type           = "gp3"
  }
  profile                 = var.aws_profile == "" ? null : var.aws_profile
  region                  = var.aws_region
  secret_key              = var.aws_secret_key
  security_group_id       = var.security_group_id
  skip_profile_validation = var.skip_profile_validation
  snapshot_groups         = split(",", var.snapshot_groups)
  snapshot_tags = {
    ami_name = local.ami_name
  }
  snapshot_users               = var.snapshot_users == "" ? null : split(",", var.snapshot_users)
  source_ami                   = local.source_ami
  ssh_bastion_host             = var.ssh_bastion_host
  ssh_bastion_password         = var.ssh_bastion_password
  ssh_bastion_private_key_file = local.ssh_bastion_private_key_file
  ssh_bastion_username         = local.ssh_bastion_username
  ssh_key_exchange_algorithms  = ["curve25519-sha256@libssh.org", "ecdh-sha2-nistp256", "ecdh-sha2-nistp384", "ecdh-sha2-nistp521", "diffie-hellman-group14-sha1", "diffie-hellman-group1-sha1"]
  ssh_username                 = var.ssh_username
  subnet_id                    = var.subnet_id
  tags = {
    build_date             = legacy_isotime("June 7, 7:22:43pm 2014") # json template isotime
    build_timestamp        = local.build_timestamp
    containerd_version     = var.containerd_version
    distribution           = var.distribution
    distribution_version   = var.distribution_version
    gpu                    = var.gpu
    gpu_nvidia_version     = var.gpu_nvidia_version
    gpu_types              = var.gpu_types
    image_builder_version  = var.konvoy_image_builder_version
    kubernetes_cni_version = var.kubernetes_cni_version
    kubernetes_version     = var.kubernetes_full_version
    source_ami             = local.source_ami
  }
  vpc_id = var.vpc_id
  run_tags = var.run_tags

  skip_create_ami = var.dry_run
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/build
build {
  sources = ["source.amazon-ebs.kib_image"]

  provisioner "shell" {
    remote_folder = "${var.remote_folder}"
    environment_vars = ["HTTP_PROXY=${var.http_proxy}", "http_proxy=${var.http_proxy}", "HTTPS_PROXY=${var.https_proxy}", "https_proxy=${var.https_proxy}", "NO_PROXY=${var.no_proxy}", "no_proxy=${var.no_proxy}", "BUILD_NAME=${var.build_name}"]
    inline           = ["if [ $BUILD_NAME != \"ubuntu-1804\" ]; then exit 0; fi", "while [ ! -f /var/lib/cloud/instance/boot-finished ]; do echo 'Waiting for cloud-init...'; sleep 1; done", "sudo apt-get -qq update && sudo DEBIAN_FRONTEND=noninteractive apt-get -qqy install python python-pip"]
  }

  provisioner "ansible" {
    ansible_env_vars = ["ANSIBLE_SSH_ARGS='${var.existing_ansible_ssh_args} -o IdentitiesOnly=yes -o HostkeyAlgorithms=+ssh-rsa -o PubkeyAcceptedAlgorithms=+ssh-rsa'", "ANSIBLE_REMOTE_TEMP='${var.remote_folder}/.ansible/'"]
    extra_arguments  = ["--extra-vars", "${var.ansible_extra_vars}"]
    playbook_file    = "${path.cwd}/ansible/provision.yaml"
    user             = "${var.ssh_username}"
  }

  provisioner "shell" {
    inline = ["mkdir -p ${var.remote_folder}/.goss-dir"]
  }

  provisioner "file" {
    destination = "${var.remote_folder}/.goss-dir/goss"
    direction   = "upload"
    max_retries = "10"
    source      = var.goss_binary
  }


  provisioner "goss" {
    arch           = var.goss_arch
    download_path  = "${var.remote_folder}/.goss-dir/goss"
    format         = var.goss_format
    format_options = var.goss_format_options
    goss_file      = var.goss_entry_file
    inspect        = var.goss_inspect_mode
    skip_install   = true
    tests          = var.goss_tests_dir == null ? null : [var.goss_tests_dir]
    url            = var.goss_url
    use_sudo       = true
    vars_env = {
      HTTPS_PROXY = var.https_proxy
      HTTP_PROXY  = var.http_proxy
      NO_PROXY    = var.no_proxy
      http_proxy  = var.http_proxy
      https_proxy = var.https_proxy
      no_proxy    = var.no_proxy
    }
    vars_file = var.goss_vars_file
    vars_inline = {
      ARCH     = "amd64"
      OS       = lower(var.distribution)
      PROVIDER = "amazon"
    }
    version = var.goss_version
  }

  provisioner "shell" {
    inline = ["rm -r  ${var.remote_folder}/.goss-dir"]
  }

  post-processor "manifest" {
    custom_data = {
      containerd_version     = "${var.containerd_version}"
      distribution           = "${var.distribution}"
      distribution_version   = "${var.distribution_version}"
      kubernetes_cni_version = "${var.kubernetes_cni_semver}"
      kubernetes_version     = "${var.kubernetes_full_version}"
    }
    output = var.manifest_output
  }
}
